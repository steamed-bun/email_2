<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<context:component-scan base-package="com.xiyou"/>

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>	

	<mvc:annotation-driven/>
	
	<!-- 由于静态文件被springMVC的拦截器当成是一个普通的请求，从而被拦截，所以直接访问不到静态资源 -->
	<mvc:default-servlet-handler/>

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:db.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 配置链接属性-->
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>

		<!--配置c3p0连接池的私有属性-->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
		<property name="minPoolSize" value="${jdbc.initPoolSize}"/>
		<!--关闭链接后不自动commit-->
		<property name="autoCommitOnClose" value="false"/>
		<property name="checkoutTimeout" value="10000"/>
		<!--获取连接失败重试次数-->
		<property name="acquireRetryAttempts" value="2"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池-->
		<property name="dataSource" ref="dataSource"/>
		<!-- 配置Mybatis全局文件：-->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>

		<!-- 扫描entity包-->
		<property name="typeAliasesPackage" value="com.xiyou.entities"/>
		<!-- 扫描sql配置文件-->
		<property name="mapperLocations" value="classpath:com/xiyou/email/mapper/*Mapper.xml"/>
	</bean>
	<!-- 注入sqlSessionFactory -->
	<!-- 给出扫描Dao接口包-->
    <!-- 自动扫描配置，即mapper包下的所有接口都会通过SqlSessionFactory代理，不需要再手工去实现DAO接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<property name="basePackage" value="com.xiyou.email.mapper"/>
	</bean>

    <context:component-scan base-package="com.xiyou.email.service"/>
    <!-- 配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">

        <!-- 因为这个spring-service中没有定义dataSource但在spring-dao中已经定义了 所以后期执行的时候 会自动找到-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置基于注解声明事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
